{"mappings":"ACAA,OAAO,gBAAgB,CAAC,mBAAoB,WAC1C,IAAM,EAAe,SAAS,aAAa,CAAC,qBACtC,EAAW,SAAS,aAAa,CAAC,wBAClC,EAAiB,SAAS,aAAa,CAAC,uBACxC,EAAiB,SAAS,aAAa,CAAC,uBAE1C,EAAa,CAAA,EACb,EAAS,EACT,EAAkB,EAGtB,GACE,CAAC,GACD,CAAC,GACD,CAAC,GACD,CAAE,CAAA,aAAoB,WAAA,GACtB,CAAE,CAAA,aAA0B,WAAA,EAE5B,OAGF,IAAM,EAAsB,KAC1B,IAAM,EAAc,EAAS,UAAU,CAAI,CAAA,EAAS,WAAW,CAAG,EAAS,WAAU,AAAV,EACrE,EAAa,EAAe,WAAW,CAAG,EAAe,WAAW,AAE1E,CAAA,EAAe,KAAK,CAAC,SAAS,CAAG,CAAC,WAAW,EADnC,EAAc,EACyB,GAAG,CAAC,AACvD,EAEM,EAAkB,KACtB,IAAM,EAAe,EAAS,WAAW,CACnC,EAAa,EAAS,WAAW,AAEvC,CAAA,EAAe,KAAK,CAAC,KAAK,CAAG,AADA,EAAe,EAAc,IACP,IACnD,GACF,EAEM,EAAY,AAAC,IAEjB,GADA,EAAa,CAAA,EAEX,CAAC,EAAE,MAAM,EACT,CAAE,CAAA,EAAE,MAAM,YAAY,WAAA,EAEtB,OAEc,EAAE,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,sBAC5C,EAAS,aAAa,WAAa,EAAE,OAAO,CAAC,EAAE,CAAC,OAAO,CAAG,EAAE,OAAO,CACnE,IAAM,EAAmB,EAAe,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,wBAC9D,EAAkB,EAAmB,WAAW,CAAgB,CAAC,EAAE,EAAI,EACvE,SAAS,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,YAC9B,EAEM,EAAS,AAAC,IACd,GAAI,CAAC,EAAY,OACjB,EAAE,cAAc,GAEhB,IAAM,EAAK,AADD,CAAA,aAAa,WAAa,EAAE,OAAO,CAAC,EAAE,CAAC,OAAO,CAAG,EAAE,OAAO,AAAP,EAC9C,EACT,EAAa,EAAe,WAAW,CAAG,EAAe,WAAW,CACtE,EAAgB,EAAkB,EAEtC,EAAgB,KAAK,GAAG,CAAC,EAAG,KAAK,GAAG,CAAC,EAAY,IACjD,EAAe,KAAK,CAAC,SAAS,CAAG,CAAC,WAAW,EAAE,EAAc,GAAG,CAAC,CAGjE,IAAM,EAAU,AADI,EAAgB,EACL,CAAA,EAAS,WAAW,CAAG,EAAS,WAAU,AAAV,CAC/D,CAAA,EAAS,KAAK,CAAC,SAAS,CAAG,CAAC,YAAY,EAAE,EAAQ,GAAG,CAAC,AACxD,EAEM,EAAW,KACf,EAAa,CAAA,EACb,SAAS,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,YACjC,EAYA,GAVA,EAAe,gBAAgB,CAAC,YAAa,GAC7C,EAAe,gBAAgB,CAAC,aAAc,GAC9C,OAAO,gBAAgB,CAAC,YAAa,EAAQ,CAAE,QAAS,CAAA,CAAM,GAC9D,OAAO,gBAAgB,CAAC,YAAa,EAAQ,CAAE,QAAS,CAAA,CAAM,GAC9D,OAAO,gBAAgB,CAAC,UAAW,GACnC,OAAO,gBAAgB,CAAC,WAAY,GACpC,OAAO,gBAAgB,CAAC,SAAU,GAElC,IAGE,CAAC,GACD,CAAC,EAED,OAGF,IAAI,EAAa,CAAA,EAEjB,EAAa,gBAAgB,CAAC,QAAS,WACrC,CAAA,EAAa,CAAC,CAAd,GAGE,EAAS,SAAS,CAAC,MAAM,CAAC,mCAC1B,EAAS,SAAS,CAAC,GAAG,CAAC,mCACvB,EAAa,WAAW,CAAG,cAE3B,EAAS,SAAS,CAAC,GAAG,CAAC,mCACvB,EAAS,SAAS,CAAC,MAAM,CAAC,mCAC1B,EAAa,WAAW,CAAG,YAE/B,EACF","sources":["<anon>","src/scripts.ts"],"sourcesContent":["window.addEventListener('DOMContentLoaded', function() {\n    const toggleButton = document.querySelector('.js-toggle-button');\n    const carousel = document.querySelector('.js-carousel-element');\n    const scrollbarTrack = document.querySelector('.js-scrollbar-track');\n    const scrollbarThumb = document.querySelector('.js-scrollbar-thumb');\n    let isDragging = false;\n    let startX = 0;\n    let startTransformX = 0;\n    let startReverse = false;\n    if (!carousel || !scrollbarTrack || !scrollbarThumb || !(carousel instanceof HTMLElement) || !(scrollbarThumb instanceof HTMLElement)) return;\n    const updateThumbPosition = ()=>{\n        const scrollRatio = carousel.scrollLeft / (carousel.scrollWidth - carousel.clientWidth);\n        const trackWidth = scrollbarTrack.clientWidth - scrollbarThumb.clientWidth;\n        const x = scrollRatio * trackWidth;\n        scrollbarThumb.style.transform = `translateX(${x}px)`;\n    };\n    const resizeScrollbar = ()=>{\n        const visibleWidth = carousel.clientWidth;\n        const totalWidth = carousel.scrollWidth;\n        const scrollbarThumbWidth = visibleWidth / totalWidth * 100;\n        scrollbarThumb.style.width = scrollbarThumbWidth + '%';\n        updateThumbPosition();\n    };\n    const startDrag = (e)=>{\n        isDragging = true;\n        if (!e.target || !(e.target instanceof HTMLElement)) return;\n        startReverse = !e.target.classList.contains('js-scrollbar-thumb');\n        startX = e instanceof TouchEvent ? e.touches[0].clientX : e.clientX;\n        const currentTransform = scrollbarThumb.style.transform.match(/translateX\\((.*)px\\)/);\n        startTransformX = currentTransform ? parseFloat(currentTransform[1]) : 0;\n        document.body.classList.add('no-select');\n    };\n    const onDrag = (e)=>{\n        if (!isDragging) return;\n        e.preventDefault();\n        const x = e instanceof TouchEvent ? e.touches[0].clientX : e.clientX;\n        const dx = x - startX;\n        const trackWidth = scrollbarTrack.clientWidth - scrollbarThumb.clientWidth;\n        let newTransformX = startTransformX + dx;\n        newTransformX = Math.max(0, Math.min(trackWidth, newTransformX));\n        scrollbarThumb.style.transform = `translateX(${newTransformX}px)`;\n        const scrollRatio = newTransformX / trackWidth;\n        const scrollX = scrollRatio * (carousel.scrollWidth - carousel.clientWidth);\n        carousel.style.transform = `translateX(-${scrollX}px)`;\n    };\n    const stopDrag = ()=>{\n        isDragging = false;\n        document.body.classList.remove('no-select');\n    };\n    scrollbarThumb.addEventListener('mousedown', startDrag);\n    scrollbarThumb.addEventListener('touchstart', startDrag);\n    window.addEventListener('mousemove', onDrag, {\n        passive: false\n    });\n    window.addEventListener('touchmove', onDrag, {\n        passive: false\n    });\n    window.addEventListener('mouseup', stopDrag);\n    window.addEventListener('touchend', stopDrag);\n    window.addEventListener('resize', resizeScrollbar);\n    resizeScrollbar();\n    if (!toggleButton || !carousel) return;\n    let isExpanded = false;\n    toggleButton.addEventListener('click', function() {\n        isExpanded = !isExpanded;\n        if (isExpanded) {\n            carousel.classList.remove('grid-rows-[1fr_1fr_0fr_0fr_0fr]');\n            carousel.classList.add('grid-rows-[1fr_1fr_1fr_1fr_1fr]');\n            toggleButton.textContent = 'Show Less';\n        } else {\n            carousel.classList.add('grid-rows-[1fr_1fr_0fr_0fr_0fr]');\n            carousel.classList.remove('grid-rows-[1fr_1fr_1fr_1fr_1fr]');\n            toggleButton.textContent = 'Show More';\n        }\n    });\n});\n\n//# sourceMappingURL=shopify-starter.c6509dad.js.map\n","window.addEventListener('DOMContentLoaded', function() {\n  const toggleButton = document.querySelector('.js-toggle-button')\n  const carousel = document.querySelector('.js-carousel-element')\n  const scrollbarTrack = document.querySelector('.js-scrollbar-track')\n  const scrollbarThumb = document.querySelector('.js-scrollbar-thumb')\n\n  let isDragging = false\n  let startX = 0\n  let startTransformX = 0\n  let startReverse = false\n\n  if (\n    !carousel ||\n    !scrollbarTrack ||\n    !scrollbarThumb ||\n    !(carousel instanceof HTMLElement) ||\n    !(scrollbarThumb instanceof HTMLElement)\n  ) {\n    return\n  }\n\n  const updateThumbPosition = () => {\n    const scrollRatio = carousel.scrollLeft / (carousel.scrollWidth - carousel.clientWidth)\n    const trackWidth = scrollbarTrack.clientWidth - scrollbarThumb.clientWidth\n    const x = scrollRatio * trackWidth\n    scrollbarThumb.style.transform = `translateX(${x}px)`\n  }\n\n  const resizeScrollbar = () => {\n    const visibleWidth = carousel.clientWidth\n    const totalWidth = carousel.scrollWidth\n    const scrollbarThumbWidth = (visibleWidth / totalWidth) * 100\n    scrollbarThumb.style.width = scrollbarThumbWidth + '%'\n    updateThumbPosition()\n  }\n\n  const startDrag = (e: MouseEvent | TouchEvent) => {\n    isDragging = true\n    if (\n      !e.target ||\n      !(e.target instanceof HTMLElement)\n    ) {\n      return\n    }\n    startReverse = !e.target.classList.contains('js-scrollbar-thumb')\n    startX = e instanceof TouchEvent ? e.touches[0].clientX : e.clientX\n    const currentTransform = scrollbarThumb.style.transform.match(/translateX\\((.*)px\\)/)\n    startTransformX = currentTransform ? parseFloat(currentTransform[1]) : 0\n    document.body.classList.add('no-select')\n  }\n\n  const onDrag = (e: MouseEvent | TouchEvent) => {\n    if (!isDragging) return\n    e.preventDefault()\n    const x = e instanceof TouchEvent ? e.touches[0].clientX : e.clientX\n    const dx = x - startX\n    const trackWidth = scrollbarTrack.clientWidth - scrollbarThumb.clientWidth\n    let newTransformX = startTransformX + dx\n\n    newTransformX = Math.max(0, Math.min(trackWidth, newTransformX))\n    scrollbarThumb.style.transform = `translateX(${newTransformX}px)`\n\n    const scrollRatio = newTransformX / trackWidth\n    const scrollX = scrollRatio * (carousel.scrollWidth - carousel.clientWidth)\n    carousel.style.transform = `translateX(-${scrollX}px)`\n  }\n\n  const stopDrag = () => {\n    isDragging = false\n    document.body.classList.remove('no-select')\n  }\n\n  scrollbarThumb.addEventListener('mousedown', startDrag)\n  scrollbarThumb.addEventListener('touchstart', startDrag)\n  window.addEventListener('mousemove', onDrag, { passive: false })\n  window.addEventListener('touchmove', onDrag, { passive: false })\n  window.addEventListener('mouseup', stopDrag)\n  window.addEventListener('touchend', stopDrag)\n  window.addEventListener('resize', resizeScrollbar)\n\n  resizeScrollbar()\n  \n  if (\n    !toggleButton ||\n    !carousel\n  ) {\n    return\n  }\n\n  let isExpanded = false\n  \n  toggleButton.addEventListener('click', function() {\n    isExpanded = !isExpanded\n    \n    if (isExpanded) {\n      carousel.classList.remove('grid-rows-[1fr_1fr_0fr_0fr_0fr]')\n      carousel.classList.add('grid-rows-[1fr_1fr_1fr_1fr_1fr]')\n      toggleButton.textContent = 'Show Less'\n    } else {\n      carousel.classList.add('grid-rows-[1fr_1fr_0fr_0fr_0fr]')\n      carousel.classList.remove('grid-rows-[1fr_1fr_1fr_1fr_1fr]')\n      toggleButton.textContent = 'Show More'\n    }\n  })\n})"],"names":["window","addEventListener","toggleButton","document","querySelector","carousel","scrollbarTrack","scrollbarThumb","isDragging","startX","startTransformX","HTMLElement","updateThumbPosition","scrollRatio","scrollLeft","scrollWidth","clientWidth","trackWidth","style","transform","resizeScrollbar","visibleWidth","totalWidth","width","scrollbarThumbWidth","startDrag","e","target","classList","contains","TouchEvent","touches","clientX","currentTransform","match","parseFloat","body","add","onDrag","preventDefault","dx","x","newTransformX","Math","max","min","scrollX","stopDrag","remove","passive","isExpanded","textContent"],"version":3,"file":"shopify-starter.c6509dad.js.map"}